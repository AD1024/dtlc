id :: Nat -> Nat;;
id := \x : Nat. x;;

eq_refl :: Forall (A : Type). Forall (x : A). x = x;;
eq_refl := \A : Type.\x : A. Refl A x;;

succ :: Forall (x : Nat). Nat;;
succ := \x : Nat. Succ x;;

plus :: Forall (x : Nat). Forall (y : Nat). Nat;;
plus := \x : Nat.\y : Nat. nat_elim (\_ : Nat. Nat) y (\_ : Nat. \h : Nat. Succ h) x;;

f_eq :: Forall (A : Type). Forall (B : Type). Forall (x : A). Forall (y : A). Forall (f : Forall (x : A). B). Forall (eq : (x = y)). (f x) = (f y);;
f_eq := \A: Type. \B : Type. \x : A. \y : A. \f : (Forall (x : A). B).\eqf : (x = y).
            eq_elim A
                    (\u : Type.\v : Type. (f u) = (f v))
                    (\w : A. Refl B (f w))
                    eqf;;

eq_trans :: Forall (A : Type). Forall (a : A). Forall (b : A). Forall (c : A). a = b -> b = c -> a = c;;
eq_trans := \A : Type. \a : A. \b : A. \c : A.\Eab : (a = b).
            eq_elim A (\u : A.\v : A. Forall (_ : (v = c)). u = c)
                      (\w : A. \e : (w = c). e)
                      Eab;;

eq_sym :: Forall (A : Type). Forall (a : A). Forall (b : A). a = b -> b = a;;
eq_sym := \A : Type. \a : A. \b : A. \eq : (a = b).
            eq_elim A (\u : A.\v : A. v = u)
                      (\w : A. Refl A w)
                      eq;;

eq_sym_again :: Forall (A : Type). Forall (a : A). Forall (b : A). Forall (eq : (a = b)). b = a;;
eq_sym_again := \A : Type. \x : A. \y : A. \eq : (x = y). eq_sym A x y eq;;

two :: Nat;;
two := succ (succ Zero);;

two_eq_two :: two = (plus (Succ Zero) (Succ Zero));;
two_eq_two := Refl Nat two;;

test_plus :: Forall (x : Nat). (plus Zero x) = x;;
test_plus := \x : Nat. Refl Nat x;;

plus_Z :: Forall (x : Nat). (plus x Zero) = x;;
plus_Z := \x : Nat. nat_elim (\z : Nat. (plus z Zero) = z)
                            (Refl Nat Zero)
                            (\n : Nat. \h : ((plus n Zero) = n). f_eq Nat Nat (plus n Zero) n succ h)
                            x;;

plus_nSm :: Forall (x : Nat). Forall (y : Nat). (plus x (succ y)) = (succ (plus x y));;
plus_nSm := \x : Nat. \y : Nat.
            nat_elim (\z. (plus z (succ y)) = (succ (plus z y)))
                     (f_eq Nat Nat y y succ (Refl Nat y))
                     (\n. \IH : ((plus n (succ y)) = (succ (plus y n))). f_eq Nat Nat (plus n (Succ y)) (Succ (plus n y)) succ IH)
                     x;;

plus_comm :: Forall (x : Nat). Forall (y : Nat). (plus x y) = (plus y x);;
plus_comm := \x : Nat. \y : Nat.
            nat_elim (\z : Nat. (plus z y) = (plus y z))
                     (eq_sym Nat (plus y Zero) y (plus_Z y))
                     (\n. \IH : ((plus n y) = (plus y n)).
                     eq_trans Nat 
                            (Succ (plus n y))
                            (Succ (plus y n))
                            (plus y (Succ n))
                            (f_eq Nat Nat (plus n y) (plus y n) succ IH) 
                            (eq_sym Nat (Succ (plus y n)) (plus y (Succ n)) (plus_nSm y n)))
                     x;;

times_two :: Nat -> Nat;;
times_two := \x : Nat. plus x x;;

apply :: Forall (A : Type). Forall (B : Type). (A -> B) -> A -> B;;
apply := \A. \B. \f : (A -> B). \x : A. f x;;